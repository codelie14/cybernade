import React, { useState, useRef, ChangeEvent } from 'react';
import SEO from '../../components/SEO';

interface ScanResult {
  fileName: string;
  fileSize: number;
  fileType: string;
  isInfected: boolean;
  threatName?: string;
  threatLevel?: 'low' | 'medium' | 'high' | 'critical';
  scanTime: number;
  detectionMethod?: string;
}

const MalwareScanner: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [scanning, setScanning] = useState<boolean>(false);
  const [scanProgress, setScanProgress] = useState<number>(0);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFiles = Array.from(e.target.files);
      setFiles(selectedFiles);
      setScanResults([]);
      setError(null);
    }
  };

  const startScan = async () => {
    if (files.length === 0) {
      setError('Veuillez sélectionner au moins un fichier à analyser.');
      return;
    }
    
    setScanning(true);
    setScanProgress(0);
    setError(null);
    
    try {
      // Dans une application réelle, nous enverrions les fichiers à un service d'analyse antivirus
      // Ici, nous simulons une analyse pour la démonstration
      await simulateMalwareScan();
    } catch (err) {
      console.error('Erreur lors de l\'analyse:', err);
      setError('Une erreur est survenue lors de l\'analyse. Veuillez réessayer plus tard.');
    } finally {
      setScanning(false);
    }
  };

  const simulateMalwareScan = async (): Promise<void> => {
    const results: ScanResult[] = [];
    const totalFiles = files.length;
    
    for (let i = 0; i < totalFiles; i++) {
      const file = files[i];
      
      // Simuler une progression de scan
      for (let progress = 0; progress <= 100; progress += 10) {
        setScanProgress(Math.floor(((i * 100) + progress) / totalFiles));
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Déterminer aléatoirement si le fichier est infecté (pour la démonstration)
      const isInfected = Math.random() < 0.2; // 20% de chance d'être infecté
      
      // Déterminer le niveau de menace si infecté
      let threatLevel: 'low' | 'medium' | 'high' | 'critical' | undefined;
      let threatName: string | undefined;
      let detectionMethod: string | undefined;
      
      if (isInfected) {
        const levels: ('low' | 'medium' | 'high' | 'critical')[] = ['low', 'medium', 'high', 'critical'];
        threatLevel = levels[Math.floor(Math.random() * levels.length)];
        
        // Générer un nom de menace fictif
        const threatPrefixes = ['Trojan', 'Worm', 'Ransomware', 'Spyware', 'Adware', 'Rootkit'];
        const threatSuffixes = ['Gen', 'Variant', 'Exploit', 'Dropper', 'Downloader', 'Backdoor'];
        const randomNames = ['Zeus', 'Cerber', 'Locky', 'WannaCry', 'Petya', 'Emotet', 'Stuxnet'];
        
        const prefix = threatPrefixes[Math.floor(Math.random() * threatPrefixes.length)];
        const suffix = threatSuffixes[Math.floor(Math.random() * threatSuffixes.length)];
        const name = randomNames[Math.floor(Math.random() * randomNames.length)];
        
        threatName = `${prefix}.${name}.${suffix}`;
        
        // Méthode de détection
        const methods = ['Signature', 'Heuristique', 'Comportementale', 'Machine Learning'];
        detectionMethod = methods[Math.floor(Math.random() * methods.length)];
      }
      
      // Déterminer le type de fichier
      const fileExtension = file.name.split('.').pop()?.toLowerCase() || '';
      let fileType = 'Inconnu';
      
      if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(fileExtension)) {
        fileType = 'Image';
      } else if (['doc', 'docx', 'pdf', 'txt', 'rtf', 'odt'].includes(fileExtension)) {
        fileType = 'Document';
      } else if (['xls', 'xlsx', 'csv'].includes(fileExtension)) {
        fileType = 'Feuille de calcul';
      } else if (['zip', 'rar', '7z', 'tar', 'gz'].includes(fileExtension)) {
        fileType = 'Archive';
      } else if (['exe', 'msi', 'dll', 'bat', 'cmd'].includes(fileExtension)) {
        fileType = 'Exécutable';
      } else if (['js', 'html', 'css', 'php', 'py', 'java'].includes(fileExtension)) {
        fileType = 'Code source';
      }
      
      // Ajouter le résultat
      results.push({
        fileName: file.name,
        fileSize: file.size,
        fileType,
        isInfected,
        threatName,
        threatLevel,
        scanTime: Math.floor(Math.random() * 5000) + 1000, // 1-6 secondes
        detectionMethod
      });
    }
    
    setScanResults(results);
  };

  const resetScan = () => {
    setFiles([]);
    setScanResults([]);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const formatBytes = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatTime = (ms: number): string => {
    return `${(ms / 1000).toFixed(2)} secondes`;
  };

  const getThreatLevelColor = (level?: string): string => {
    switch (level) {
      case 'low': return 'bg-blue-100 text-blue-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'critical': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getThreatLevelText = (level?: string): string => {
    switch (level) {
      case 'low': return 'Faible';
      case 'medium': return 'Moyen';
      case 'high': return 'Élevé';
      case 'critical': return 'Critique';
      default: return 'Inconnu';
    }
  };

  const getSummary = () => {
    if (scanResults.length === 0) return null;
    
    const totalFiles = scanResults.length;
    const infectedFiles = scanResults.filter(result => result.isInfected).length;
    const cleanFiles = totalFiles - infectedFiles;
    
    return {
      totalFiles,
      infectedFiles,
      cleanFiles,
      infectionRate: ((infectedFiles / totalFiles) * 100).toFixed(1)
    };
  };

  const summary = getSummary();

  return (
    <>
      <SEO 
        title="Scanner de Malware | Cybernade"
        description="Analysez vos fichiers pour détecter les logiciels malveillants et protégez votre système contre les menaces de sécurité."
        keywords="scanner malware, antivirus, sécurité informatique, détection virus, analyse fichiers, cybersécurité"
      />
      
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-3xl font-bold text-center mb-2">Scanner de Malware</h1>
            <p className="text-center text-gray-600 mb-8">
              Analysez vos fichiers pour détecter les logiciels malveillants et protégez votre système.
            </p>
            
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
              <div className="mb-6">
                <label htmlFor="file" className="block text-sm font-medium text-gray-700 mb-1">
                  Sélectionner des fichiers à analyser
                </label>
                <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                  <div className="space-y-1 text-center">
                    <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                      <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                    <div className="flex text-sm text-gray-600">
                      <label htmlFor="file-upload" className="relative cursor-pointer bg-white rounded-md font-medium text-primary hover:text-primary/80">
                        <span>Téléverser des fichiers</span>
                        <input 
                          id="file-upload" 
                          name="file-upload" 
                          type="file" 
                          multiple
                          className="sr-only"
                          onChange={handleFileChange}
                          ref={fileInputRef}
                          disabled={scanning}
                        />
                      </label>
                      <p className="pl-1">ou glissez-déposez</p>
                    </div>
                    <p className="text-xs text-gray-500">
                      Tous types de fichiers jusqu'à 50MB
                    </p>
                  </div>
                </div>
                {files.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm text-gray-600">
                      {files.length} fichier{files.length > 1 ? 's' : ''} sélectionné{files.length > 1 ? 's' : ''}
                    </p>
                    <ul className="mt-1 text-xs text-gray-500 max-h-20 overflow-y-auto">
                      {files.map((file, index) => (
                        <li key={index}>{file.name} ({formatBytes(file.size)})</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
              
              {error && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
                  <p className="text-sm text-red-600">{error}</p>
                </div>
              )}
              
              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={resetScan}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                  disabled={scanning || files.length === 0}
                >
                  Réinitialiser
                </button>
                
                <button
                  onClick={startScan}
                  disabled={scanning || files.length === 0}
                  className="px-6 py-2 bg-primary hover:bg-primary/90 text-white rounded-md transition-colors flex items-center disabled:opacity-70 disabled:cursor-not-allowed"
                >
                  {scanning ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Analyse en cours...
                    </>
                  ) : (
                    <>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M6.625 2.655A9 9 0 0119 11a1 1 0 11-2 0 7 7 0 00-9.625-6.492 1 1 0 11-.75-1.853zM4.662 4.959A1 1 0 014.75 6.37 6.97 6.97 0 003 11a1 1 0 11-2 0 8.97 8.97 0 012.25-5.953 1 1 0 011.412-.088z" clipRule="evenodd" />
                        <path fillRule="evenodd" d="M5 11a5 5 0 1110 0 1 1 0 11-2 0 3 3 0 10-6 0c0 1.677-.345 3.276-.968 4.729a1 1 0 11-1.838-.789A9.964 9.964 0 005 11zm8.921 2.012a1 1 0 01.831 1.145 19.86 19.86 0 01-.545 2.436 1 1 0 11-1.92-.558c.207-.713.371-1.445.49-2.192a1 1 0 011.144-.83z" clipRule="evenodd" />
                        <path fillRule="evenodd" d="M10 10a1 1 0 011 1c0 2.236-.46 4.368-1.29 6.304a1 1 0 01-1.838-.789A13.952 13.952 0 009 11a1 1 0 011-1z" clipRule="evenodd" />
                      </svg>
                      Lancer l'analyse
                    </>
                  )}
                </button>
              </div>
              
              {scanning && (
                <div className="mt-6">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium text-gray-700">Progression de l'analyse</span>
                    <span className="text-sm font-medium text-gray-700">{scanProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div 
                      className="bg-primary h-2.5 rounded-full transition-all duration-300"
                      style={{ width: `${scanProgress}%` }}
                    ></div>
                  </div>
                  <p className="mt-2 text-sm text-gray-600">
                    Analyse des fichiers en cours... Veuillez patienter.
                  </p>
                </div>
              )}
            </div>
            
            {scanResults.length > 0 && summary && (
              <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 className="text-xl font-semibold mb-4">Résultats de l'analyse</h2>
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                  <div className="bg-gray-100 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold">{summary.totalFiles}</div>
                    <div className="text-sm text-gray-600">Fichiers analysés</div>
                  </div>
                  <div className="bg-green-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-green-600">{summary.cleanFiles}</div>
                    <div className="text-sm text-green-600">Fichiers sains</div>
                  </div>
                  <div className="bg-red-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-red-600">{summary.infectedFiles}</div>
                    <div className="text-sm text-red-600">Menaces détectées</div>
                  </div>
                  <div className="bg-blue-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-blue-600">{summary.infectionRate}%</div>
                    <div className="text-sm text-blue-600">Taux d'infection</div>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Fichier
                        </th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Type
                        </th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Taille
                        </th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Statut
                        </th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Détails
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {scanResults.map((result, index) => (
                        <tr key={index}>
                          <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                            {result.fileName}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {result.fileType}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {formatBytes(result.fileSize)}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap">
                            {result.isInfected ? (
                              <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                Infecté
                              </span>
                            ) : (
                              <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                Sain
                              </span>
                            )}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {result.isInfected ? (
                              <div>
                                <p>Menace: <span className="font-medium">{result.threatName}</span></p>
                                <p>Niveau: 
                                  <span className={`ml-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getThreatLevelColor(result.threatLevel)}`}>
                                    {getThreatLevelText(result.threatLevel)}
                                  </span>
                                </p>
                                <p>Méthode: {result.detectionMethod}</p>
                              </div>
                            ) : (
                              <p>Temps d'analyse: {formatTime(result.scanTime)}</p>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                {summary.infectedFiles > 0 && (
                  <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-md">
                    <h3 className="text-md font-semibold text-red-700 mb-2">
                      Actions recommandées
                    </h3>
                    <ul className="list-disc pl-5 space-y-1 text-sm text-red-700">
                      <li>Supprimez ou mettez en quarantaine les fichiers infectés</li>
                      <li>Exécutez une analyse complète de votre système avec un logiciel antivirus à jour</li>
                      <li>Vérifiez les autres appareils qui pourraient avoir été en contact avec ces fichiers</li>
                      <li>Mettez à jour votre système d'exploitation et vos logiciels</li>
                      <li>Changez vos mots de passe si des données sensibles ont pu être compromises</li>
                    </ul>
                  </div>
                )}
              </div>
            )}
            
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold mb-4">À propos du Scanner de Malware</h2>
              
              <div className="space-y-4">
                <p>
                  Notre Scanner de Malware utilise des technologies avancées pour détecter les logiciels malveillants 
                  dans vos fichiers. L'analyse est effectuée entièrement dans votre navigateur, ce qui signifie que 
                  vos fichiers ne sont pas téléchargés sur nos serveurs, garantissant ainsi votre confidentialité.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-2">Types de menaces détectées</h3>
                    <ul className="list-disc pl-5 space-y-1 text-sm">
                      <li>Virus et vers informatiques</li>
                      <li>Chevaux de Troie (Trojans)</li>
                      <li>Logiciels espions (Spyware)</li>
                      <li>Logiciels publicitaires (Adware)</li>
                      <li>Logiciels de rançon (Ransomware)</li>
                      <li>Scripts malveillants</li>
                      <li>Rootkits et backdoors</li>
                    </ul>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-2">Bonnes pratiques de sécurité</h3>
                    <ul className="list-disc pl-5 space-y-1 text-sm">
                      <li>Gardez votre système d'exploitation et vos logiciels à jour</li>
                      <li>Utilisez un antivirus réputé et maintenez-le à jour</li>
                      <li>Soyez prudent avec les pièces jointes des emails</li>
                      <li>Ne téléchargez des logiciels que depuis des sources fiables</li>
                      <li>Utilisez des mots de passe forts et uniques</li>
                      <li>Effectuez des sauvegardes régulières de vos données importantes</li>
                      <li>Méfiez-vous des tentatives de phishing</li>
                    </ul>
                  </div>
                </div>
                
                <div className="p-4 bg-blue-50 rounded-md">
                  <div className="flex">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    <p className="text-sm text-blue-700">
                      Note : Bien que notre scanner soit efficace pour détecter de nombreuses menaces, aucune solution 
                      antivirus ne peut garantir une détection à 100%. Pour une protection optimale, nous recommandons 
                      d'utiliser plusieurs outils de sécurité et de maintenir de bonnes pratiques de cybersécurité.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default MalwareScanner; 