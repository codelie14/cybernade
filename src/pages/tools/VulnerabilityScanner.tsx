import React, { useState } from 'react';
import SEO from '../../components/SEO';

interface Vulnerability {
  id: string;
  name: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  description: string;
  solution: string;
  cve?: string;
  category: string;
}

const VulnerabilityScanner: React.FC = () => {
  const [url, setUrl] = useState<string>('');
  const [scanning, setScanning] = useState<boolean>(false);
  const [scanned, setScanned] = useState<boolean>(false);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [scanProgress, setScanProgress] = useState<number>(0);
  const [scanSummary, setScanSummary] = useState<{
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  }>({ total: 0, critical: 0, high: 0, medium: 0, low: 0, info: 0 });

  // Fonction pour valider l'URL
  const validateUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch (e) {
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Réinitialiser les états
    setError(null);
    setVulnerabilities([]);
    setScanned(false);
    setScanProgress(0);
    
    // Valider l'URL
    if (!url) {
      setError('Veuillez entrer une URL');
      return;
    }
    
    // Si l'URL ne commence pas par http:// ou https://, ajouter https://
    let formattedUrl = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      formattedUrl = 'https://' + url;
    }
    
    if (!validateUrl(formattedUrl)) {
      setError('Veuillez entrer une URL valide');
      return;
    }
    
    setScanning(true);
    
    try {
      // Simuler un scan de vulnérabilités
      // Dans une application réelle, cela serait fait via une API backend
      await simulateVulnerabilityScan(formattedUrl);
      
      setScanned(true);
    } catch (err) {
      console.error('Erreur lors du scan:', err);
      setError('Une erreur est survenue lors du scan. Veuillez réessayer plus tard.');
    } finally {
      setScanning(false);
    }
  };

  // Fonction pour simuler un scan de vulnérabilités
  const simulateVulnerabilityScan = async (targetUrl: string): Promise<void> => {
    // Simuler la progression du scan
    const totalSteps = 10;
    for (let i = 1; i <= totalSteps; i++) {
      await new Promise(resolve => setTimeout(resolve, 500));
      setScanProgress(Math.floor((i / totalSteps) * 100));
    }
    
    // Générer des résultats de scan simulés basés sur l'URL
    const mockVulnerabilities: Vulnerability[] = [
      {
        id: 'V1',
        name: 'Certificat SSL expiré',
        severity: 'high',
        description: 'Le certificat SSL du site web a expiré, ce qui peut exposer les communications à des attaques de type "man-in-the-middle".',
        solution: 'Renouvelez le certificat SSL auprès de votre autorité de certification.',
        category: 'SSL/TLS'
      },
      {
        id: 'V2',
        name: 'En-têtes de sécurité HTTP manquants',
        severity: 'medium',
        description: 'Certains en-têtes de sécurité HTTP importants sont manquants, comme Content-Security-Policy, X-XSS-Protection, et X-Frame-Options.',
        solution: 'Configurez votre serveur web pour inclure les en-têtes de sécurité appropriés.',
        category: 'Configuration du serveur'
      },
      {
        id: 'V3',
        name: 'Version obsolète de jQuery',
        severity: 'medium',
        description: 'Le site utilise une version obsolète de jQuery qui contient des vulnérabilités connues.',
        solution: 'Mettez à jour jQuery vers la dernière version stable.',
        cve: 'CVE-2020-11023',
        category: 'Bibliothèques tierces'
      },
      {
        id: 'V4',
        name: 'Informations sensibles dans les commentaires HTML',
        severity: 'low',
        description: 'Des informations potentiellement sensibles ont été trouvées dans les commentaires HTML du site.',
        solution: 'Supprimez tous les commentaires contenant des informations sensibles du code HTML.',
        category: 'Divulgation d\'informations'
      },
      {
        id: 'V5',
        name: 'Cookies sans attribut Secure',
        severity: 'medium',
        description: 'Les cookies de session ne sont pas configurés avec l\'attribut Secure, ce qui permet leur transmission sur des connexions non sécurisées.',
        solution: 'Configurez tous les cookies sensibles avec les attributs Secure et HttpOnly.',
        category: 'Cookies'
      }
    ];
    
    // Ajouter une vulnérabilité critique aléatoirement
    if (Math.random() > 0.7) {
      mockVulnerabilities.push({
        id: 'V6',
        name: 'Injection SQL possible',
        severity: 'critical',
        description: 'Une vulnérabilité d\'injection SQL a été détectée dans le formulaire de recherche, permettant potentiellement l\'exécution de requêtes SQL arbitraires.',
        solution: 'Utilisez des requêtes paramétrées ou des ORM pour toutes les interactions avec la base de données.',
        cve: 'CVE-2021-12345',
        category: 'Injection'
      });
    }
    
    // Ajouter quelques informations
    mockVulnerabilities.push({
      id: 'V7',
      name: 'Serveur web identifiable',
      severity: 'info',
      description: 'La version et le type du serveur web sont divulgués dans les en-têtes de réponse.',
      solution: 'Configurez votre serveur web pour masquer les informations de version dans les en-têtes HTTP.',
      category: 'Divulgation d\'informations'
    });
    
    // Calculer le résumé du scan
    const summary = {
      total: mockVulnerabilities.length,
      critical: mockVulnerabilities.filter(v => v.severity === 'critical').length,
      high: mockVulnerabilities.filter(v => v.severity === 'high').length,
      medium: mockVulnerabilities.filter(v => v.severity === 'medium').length,
      low: mockVulnerabilities.filter(v => v.severity === 'low').length,
      info: mockVulnerabilities.filter(v => v.severity === 'info').length
    };
    
    setVulnerabilities(mockVulnerabilities);
    setScanSummary(summary);
  };

  const getSeverityColor = (severity: string): string => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      case 'info': return 'bg-gray-500 text-white';
      default: return 'bg-gray-200 text-gray-800';
    }
  };

  const getSeverityIcon = (severity: string): React.ReactNode => {
    switch (severity) {
      case 'critical':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case 'high':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case 'medium':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case 'low':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        );
      case 'info':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        );
      default:
        return <></>;
    }
  };

  return (
    <>
      <SEO 
        title="Analyseur de Vulnérabilités | Cybernade"
        description="Analysez les vulnérabilités de sécurité de votre site web ou application avec notre outil d'analyse en ligne gratuit."
        keywords="analyseur vulnérabilités, scan sécurité, audit sécurité, cybersécurité, vulnérabilités web"
      />
      
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-3xl font-bold text-center mb-2">Analyseur de Vulnérabilités</h1>
            <p className="text-center text-gray-600 mb-8">
              Analysez les vulnérabilités de sécurité potentielles d'un site web ou d'une application.
            </p>
            
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label htmlFor="url" className="block text-sm font-medium text-gray-700 mb-1">
                    URL à analyser
                  </label>
                  <div className="flex">
                    <input
                      type="text"
                      id="url"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                      placeholder="exemple.com ou https://exemple.com"
                      className="flex-1 rounded-l-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 py-2 px-4 border"
                      disabled={scanning}
                    />
                    <button
                      type="submit"
                      disabled={scanning}
                      className="px-6 py-2 bg-primary hover:bg-primary/90 text-white rounded-r-md transition-colors flex items-center disabled:opacity-70 disabled:cursor-not-allowed"
                    >
                      {scanning ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Scan en cours...
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clipRule="evenodd" />
                          </svg>
                          Analyser
                        </>
                      )}
                    </button>
                  </div>
                  {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
                  <p className="mt-1 text-xs text-gray-500">
                    Note: Cet outil effectue une analyse passive et n'exécute pas de tests intrusifs sur le site cible.
                  </p>
                </div>
              </form>
              
              {scanning && (
                <div className="mt-6">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium text-gray-700">Progression du scan</span>
                    <span className="text-sm font-medium text-gray-700">{scanProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div 
                      className="bg-primary h-2.5 rounded-full transition-all duration-300"
                      style={{ width: `${scanProgress}%` }}
                    ></div>
                  </div>
                  <p className="mt-2 text-sm text-gray-600">
                    Analyse en cours... Veuillez patienter.
                  </p>
                </div>
              )}
            </div>
            
            {scanned && (
              <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 className="text-xl font-semibold mb-4">Résultats de l'analyse</h2>
                
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
                  <div className="bg-gray-100 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold">{scanSummary.total}</div>
                    <div className="text-sm text-gray-600">Total</div>
                  </div>
                  <div className="bg-red-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-red-600">{scanSummary.critical}</div>
                    <div className="text-sm text-red-600">Critique</div>
                  </div>
                  <div className="bg-orange-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-orange-600">{scanSummary.high}</div>
                    <div className="text-sm text-orange-600">Élevé</div>
                  </div>
                  <div className="bg-yellow-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-yellow-600">{scanSummary.medium}</div>
                    <div className="text-sm text-yellow-600">Moyen</div>
                  </div>
                  <div className="bg-blue-50 p-3 rounded-lg text-center">
                    <div className="text-2xl font-bold text-blue-600">{scanSummary.low + scanSummary.info}</div>
                    <div className="text-sm text-blue-600">Faible/Info</div>
                  </div>
                </div>
                
                {vulnerabilities.length === 0 ? (
                  <div className="p-4 bg-green-50 border border-green-200 rounded-md">
                    <div className="flex">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                      </svg>
                      <div>
                        <p className="font-medium text-green-700">Aucune vulnérabilité détectée</p>
                        <p className="text-green-700">Félicitations ! Aucune vulnérabilité n'a été détectée sur ce site.</p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {vulnerabilities.map((vuln) => (
                      <div key={vuln.id} className="border border-gray-200 rounded-lg overflow-hidden">
                        <div className={`flex justify-between items-center p-4 ${getSeverityColor(vuln.severity)}`}>
                          <div className="flex items-center">
                            {getSeverityIcon(vuln.severity)}
                            <span className="ml-2 font-medium">{vuln.name}</span>
                          </div>
                          <div className="text-sm capitalize">{vuln.severity}</div>
                        </div>
                        <div className="p-4 space-y-3">
                          <div>
                            <h4 className="text-sm font-medium text-gray-700">Description</h4>
                            <p className="text-sm text-gray-600">{vuln.description}</p>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-gray-700">Solution recommandée</h4>
                            <p className="text-sm text-gray-600">{vuln.solution}</p>
                          </div>
                          <div className="flex flex-wrap gap-2">
                            <span className="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">
                              Catégorie: {vuln.category}
                            </span>
                            {vuln.cve && (
                              <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded">
                                {vuln.cve}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="mt-6 p-4 bg-blue-50 rounded-md">
                  <div className="flex">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    <p className="text-sm text-blue-700">
                      Note: Cette analyse est fournie à titre informatif uniquement. Pour une évaluation complète de la sécurité, 
                      nous recommandons de faire appel à un professionnel de la cybersécurité.
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold mb-4">À propos de l'Analyseur de Vulnérabilités</h2>
              
              <div className="space-y-4">
                <p>
                  Notre analyseur de vulnérabilités effectue une analyse passive de la sécurité d'un site web ou d'une application,
                  en recherchant des problèmes de sécurité courants tels que :
                </p>
                
                <ul className="list-disc pl-5 space-y-2">
                  <li>Problèmes de configuration SSL/TLS</li>
                  <li>En-têtes de sécurité HTTP manquants</li>
                  <li>Versions obsolètes de bibliothèques et frameworks</li>
                  <li>Divulgation d'informations sensibles</li>
                  <li>Problèmes de configuration des cookies</li>
                  <li>Vulnérabilités connues dans les CMS et plugins</li>
                </ul>
                
                <p>
                  Cet outil est conçu pour aider les propriétaires de sites web et les développeurs à identifier 
                  les problèmes de sécurité potentiels avant qu'ils ne soient exploités par des attaquants. 
                  La correction rapide des vulnérabilités est essentielle pour maintenir la sécurité de votre site web.
                </p>
                
                <div className="p-4 bg-yellow-50 rounded-md">
                  <div className="flex">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-yellow-500 mr-2 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <p className="text-sm text-yellow-700">
                      Avertissement : N'utilisez cet outil que sur des sites web dont vous êtes propriétaire ou pour lesquels 
                      vous avez obtenu l'autorisation explicite. L'analyse de sites web sans autorisation peut être illégale 
                      dans certaines juridictions.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default VulnerabilityScanner; 